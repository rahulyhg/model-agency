{"version":3,"sources":["_miliday-scroller.js","components/_activeInHover.js","components/_alert.js","components/_animFeatures.js","components/_prevUploadImg.js","components/_toggleTrigger.js"],"names":[],"mappingslBA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["class MilidayScroller {\r\n    constructor(config) {\r\n        this.place = document.querySelector(config.place)\r\n        this.stepDelay = config.stepDelay ? config.stepDelay : 5\r\n        this.scrollStep = config.scrollStep ? config.scrollStep : 5\r\n\r\n        this.trackWidth = config.trackWidth ? config.trackWidth : 15\r\n        this.sliderWidth = config.sliderWidth ? config.trackWidth : 15\r\n\r\n        this.trackClass = config.trackClass ? config.trackClass : 'miliday-scroll-track'\r\n        this.sliderClass = config.sliderClass ? config.sliderClass : 'miliday-scroll-slider'\r\n\r\n        this.track = null\r\n        this.slider = null\r\n\r\n        this.init()\r\n    }\r\n\r\n    init() {\r\n        this.buildTrack()\r\n        this.handler()\r\n    }\r\n\r\n    handler() {\r\n        let controlDistributor = this.controlDistributor.bind(this)\r\n\r\n        if (this.place.addEventListener) {\r\n            if ('onwheel' in document) {\r\n                this.place.addEventListener('wheel', controlDistributor)\r\n            } else if ('onmousewheel' in document) {\r\n                this.place.addEventListener('mousewheel', controlDistributor)\r\n            } else {\r\n                this.place.addEventListener('MozMousePixelScroll', controlDistributor)\r\n            }\r\n        } else {\r\n            this.place.attachEvent('onmousewheel', controlDistributor)\r\n        }\r\n\r\n        this.slider.addEventListener('mousedown', e => {\r\n            this.controlDistributor.startPos = e.screenY\r\n\r\n            window.addEventListener('mousemove', controlDistributor)\r\n            window.addEventListener('mouseup', e => {\r\n                window.removeEventListener('mousemove', controlDistributor)\r\n            })\r\n        })\r\n    }\r\n\r\n    controlDistributor(e) {\r\n        e = e || window.event\r\n\r\n        if (e.type === 'mousemove') {\r\n            this.positionY(this.slider, e.screenY - this.controlDistributor.startPos)\r\n            console.log('');\r\n            console.log(e.screenY);\r\n            console.log(this.controlDistributor.startPos);\r\n            console.log(e.screenY - this.controlDistributor.startPos);\r\n            console.log('');\r\n\r\n\r\n        }\r\n\r\n        if (e.type === 'wheel') {\r\n            this.smoothing(e.deltaY, () => {\r\n                this.scrollY(this.place, this.scrollStep * (e.deltaY / 100))\r\n                this.positionY(this.track, this.place.scrollTop)\r\n                this.positionY(this.slider, this.place.scrollTop * (this.place.clientHeight / this.place.scrollHeight))\r\n            }, this.scrollStep, this.stepDelay)\r\n        }\r\n\r\n        e.preventDefault ? e.preventDefault() : (e.returnValue = false)\r\n    }\r\n\r\n    buildTrack() {\r\n        let placeStyle = window.getComputedStyle(this.place)\r\n\r\n        if (placeStyle.position === 'static') {\r\n            this.place.style.position = 'relative'\r\n        }\r\n        this.place.style.overflow = 'hidden'\r\n        this.place.style.paddingRight = (parseInt(placeStyle.paddingRight) + this.trackWidth) + 'px'\r\n\r\n        this.slider = document.createElement('div')\r\n        this.slider.classList.add(this.sliderClass)\r\n        this.slider.style.height = this.place.clientHeight * (this.place.clientHeight / this.place.scrollHeight) + 'px'\r\n        this.slider.style.width = this.sliderWidth + 'px'\r\n        this.slider.style.position = 'absolute'\r\n        this.slider.style.top = 0 + 'px'\r\n        this.slider.style.right = 0 + 'px'\r\n        this.slider.style.transform = 'translate3d(0,' + this.place.scrollTop * (this.place.clientHeight / this.place.scrollHeight) + 'px, 0)'\r\n\r\n        this.track = document.createElement('div')\r\n        this.track.classList.add(this.trackClass)\r\n        this.track.style.height = this.place.clientHeight + 'px'\r\n        this.track.style.width = this.trackWidth + 'px'\r\n        this.track.style.position = 'absolute'\r\n        this.track.style.top = 0 + 'px'\r\n        this.track.style.right = 0 + 'px'\r\n        this.track.style.transform = 'translate3d(0,' + this.place.scrollTop + 'px, 0)'\r\n\r\n        this.track.appendChild(this.slider)\r\n        this.place.appendChild(this.track)\r\n    }\r\n\r\n    positionY(elem, value) {\r\n        elem.style.transform = 'translate3d(0,' + value + 'px, 0)'\r\n    }\r\n\r\n    scrollY(place, value) {\r\n        place.scrollTop += value\r\n    }\r\n\r\n    smoothing(value, callBack, step = 1, delay = 0) {\r\n        let residue = Math.abs(value)\r\n        let interval = setInterval(() => {\r\n            if (residue <= 0) {\r\n                clearInterval(interval)\r\n            } else {\r\n                residue -= step\r\n                callBack()\r\n            }\r\n        }, delay)\r\n    }\r\n}","class ActiveInHover {\r\n    constructor(config) {\r\n        this.items = $(config.items)\r\n        this.item = this.items.find($(config.item))\r\n        this.activeClass = config.activeClass\r\n\r\n        this.saveActive = this.items.find($('.' + this.activeClass))\r\n\r\n        this.item.on('mouseenter', e => {\r\n            $(e.currentTarget).addClass(this.activeClass).siblings().removeClass(this.activeClass)\r\n        })\r\n        this.item.on('click', e => {\r\n            this.saveActive = $(e.currentTarget)\r\n        })\r\n        this.items.on('mouseleave', e => {\r\n            this.saveActive.addClass(this.activeClass).siblings().removeClass(this.activeClass)\r\n        })\r\n    }\r\n}","jQuery(document).ready(function(e) {\r\n  $('.b-alert__close').click(function(e) {\r\n    $(this).closest('.b-alert').animate({ paddingTop: 0, paddingBottom: 0, height: 0, opacity: 0 }, 200, 'swing', function() {\r\n      $(this).remove();\r\n    });\r\n  });\r\n});","class AnimFeatures {\r\n    constructor(config) {\r\n        this.parrent = $(config.parrent)\r\n        this.itemTitle = this.parrent.find($(config.itemTitle))\r\n        this.lineTitle = this.parrent.find($(config.lineTitle))\r\n        this.itemValue = this.parrent.find($(config.itemValue))\r\n        this.breakPoints = config.breakPoints\r\n\r\n        this.init()\r\n    }\r\n\r\n    init() {\r\n        this.update()\r\n        this.handler()\r\n    }\r\n\r\n    handler() {\r\n        $(window).on('resize', e => {\r\n            let windowWidth = $(window).width()\r\n\r\n            for (let i = 0; i < this.breakPoints.length; i++) {\r\n                if (windowWidth <= this.breakPoints[i]) {\r\n                    this.update()\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    update() {\r\n        console.log('update');\r\n\r\n        for (let i = 0; i < this.itemTitle.length; i++) {\r\n            let widthTitle = this.itemTitle.eq(i).width()\r\n            let widthValue = this.itemValue.eq(i).width()\r\n\r\n            this.lineTitle.eq(i).width((widthTitle + widthValue * 0.4) + 'px')\r\n        }\r\n    }\r\n}","class PrevUploadImg {\r\n    constructor(config, callBack = () => {}) {\r\n        this.parent = $(config.parent)\r\n        this.input = this.parent.find($(config.input))\r\n        this.preview = this.parent.find($(config.preview))\r\n        this.extensions = config.extensions\r\n        this.maxSize = config.maxSize\r\n\r\n        this.callBack = callBack\r\n\r\n        this.init()\r\n    }\r\n\r\n    init() {\r\n        this.handler()\r\n    }\r\n\r\n    handler() {\r\n        this.input.on('change', e => {\r\n            var url = e.target.value\r\n            var ext = url.substring(url.lastIndexOf('.') + 1).toLowerCase();\r\n            var sizeMb = (e.target.files[0].size / 1000000).toFixed(3)\r\n\r\n\r\n            if (e.target.files && e.target.files[0]) {\r\n                if (this.extensions.indexOf(ext) != -1) {\r\n                    if (sizeMb < this.maxSize) {\r\n                        var reader = new FileReader();\r\n\r\n                        reader.onload = e => {\r\n                            this.render(e.target.result)\r\n                            this.callBack()\r\n                        }\r\n\r\n                        reader.readAsDataURL(e.target.files[0]);\r\n                    } else {\r\n                        alert('max-size: ' + this.maxSize + ' mb')\r\n                    }\r\n                } else {\r\n                    alert('extensions only: ' + this.extensions)\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    render(src) {\r\n        this.preview.attr('href', src);\r\n        this.preview.attr('style', \"background-image: url('\" + src + \"'\");\r\n    }\r\n}","class ToggleTrigger {\r\n    constructor(config, callBack = () => {}) {\r\n        this.items = $(config.items)\r\n        this.item = this.items.find($(config.item))\r\n        this.activeClass = config.activeClass\r\n\r\n        this.item.on('click', e => {\r\n            $(e.currentTarget).removeClass(this.activeClass).siblings().addClass(this.activeClass)\r\n            callBack()\r\n        })\r\n    }\r\n}"]}